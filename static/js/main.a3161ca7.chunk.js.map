{"version":3,"sources":["Redux/Reducers/Reducer.ts","Dashboard/saga.ts","Redux/sagas.js","Redux/Store.ts","components/Header.tsx","components/Wrapper.tsx","components/MetricCard.tsx","components/MetricChart.tsx","Dashboard/EOGMetrics.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["metricSlice","createSlice","name","initialState","allMetrics","multipleMeasurements","liveData","reducers","allMetricsDataRecevied","state","action","getMetrics","payload","multipleMeasurementsDataRecevied","metricLiveDataRecevied","map","m","metric","value","moment","parseInt","at","format","unit","metricsApiErrorReceived","MetricsReducer","reducer","actions","apiErrorReceived","watchApiError","call","toast","error","takeEvery","MetricActions","type","root","spawn","metricsSaga","combineReducers","MetricsData","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","style","background","Toolbar","Typography","variant","color","className","wrapper","height","Wrapper","children","width","backgroundColor","bullet","display","margin","transform","title","fontSize","pos","marginBottom","MetricCard","props","useState","setMetric","filterByMetric","find","info","newValue","undefined","useEffect","Card","CardContent","component","align","label","require","justifyContent","marginLeft","marginRight","minHeight","groupTimeObject","chartMetricData","seen","mergeObjectsInUnique","array","newArray","Map","forEach","item","propertyValue","has","set","get","Array","from","values","MetricChart","data","selectedChartOptions","key","i","length","j","measurements","push","filter","entry","hasOwnProperty","isArray","groupByKey","colors","textAlign","ResponsiveContainer","LineChart","top","right","left","bottom","YAxis","domain","tickCount","scale","padding","XAxis","dataKey","CartesianGrid","strokeDasharray","Legend","Tooltip","c","Line","stroke","dot","isAnimationActive","currentTime","Date","valueOf","theme","createStyles","select","spacing","EOGMetrics","dispatch","useDispatch","setSelectedChartsOptions","dropDownOptions","setDropDownOptions","useSelector","useQuery","query","resultgetMetrics","variables","input","metricName","after","before","resultMultipleMeasurements","useSubscription","resultsLiveMetrics","tempOptions","replace","toUpperCase","message","getMultipleMeasurements","newMeasurement","fetching","LinearProgress","Grid","container","xs","marginTop","onChange","options","isMulti","closeMenuOnSelect","store","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","sagas","createMuiTheme","palette","primary","main","secondary","default","App","CssBaseline","Header","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","subscriptionClient","SubscriptionClient","reconnect","client","createClient","url","exchanges","defaultExchanges","subscriptionExchange","forwardSubscription","operation","request","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3161ca7.chunk.js","sourcesContent":["/* eslint-disable prefer-destructuring */\n/* eslint-disable no-param-reassign */\n/* eslint-disable radix */\n/* eslint-disable no-unused-vars */\n/* eslint-disable quotes */\n// import { createSlice, PayloadAction } from 'redux-starter-kit';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport moment from 'moment';\n\nexport type MultipleMeasurementsTypes = {\n    multipleMeasurements: string;\n};\n\nexport type AllMeasurements = {\n    getMetrics: [];\n};\n\nexport type LiveMetricsTypes = {\n    liveData: Array<Object>;\n    metric: string;\n    value: string;\n    at: string;\n    unit: string;\n};\n\nexport type ApiErrorAction = {\n    error: string;\n};\n\nconst initialState = {\n    allMetrics: [],\n    multipleMeasurements: {},\n    liveData: {},\n};\n\nconst metricSlice = createSlice({\n    name: 'metrics',\n    initialState,\n    reducers: {\n        allMetricsDataRecevied: (state, action: PayloadAction<AllMeasurements>) => {\n            const { getMetrics } = action.payload;\n            state.allMetrics = getMetrics;\n        },\n        multipleMeasurementsDataRecevied: (state, action: PayloadAction<MultipleMeasurementsTypes>) => {\n            state.multipleMeasurements = action.payload;\n        },\n        metricLiveDataRecevied: (state, action: PayloadAction<LiveMetricsTypes>) => {\n            state.liveData = [action.payload]?.map((m) => ({\n                [m.metric]: m.value,\n                at: moment(parseInt(m.at)).format('LTS'),\n                unit: m.unit,\n            }))[0];\n        },\n        metricsApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n    },\n});\n\nexport const MetricsReducer = metricSlice.reducer;\nexport const actions = metricSlice.actions;\nexport default MetricsReducer;\n","/* eslint-disable quotes */\nimport { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { actions as MetricActions, ApiErrorAction } from '../Redux/Reducers/Reducer';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n    yield call(toast.error, `Error: ${action.payload.error}`);\n}\n\n// We could have one for each or just recive a parameter to identify the source of the error\nexport default function* watchApiError() {\n    yield takeEvery(MetricActions.metricsApiErrorReceived.type, apiErrorReceived);\n}\n","/* eslint-disable quotes */\r\nimport { spawn } from 'redux-saga/effects';\r\nimport metricsSaga from '../Dashboard/saga';\r\n\r\nexport default function* root() {\r\n    yield spawn(metricsSaga);\r\n}\r\n","/* eslint-disable quotes */\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport sagas from './sagas';\r\nimport MetricsReducer from './Reducers/Reducer';\r\n\r\nconst reducer = combineReducers({ MetricsData: MetricsReducer });\r\n\r\nexport type IState = ReturnType<typeof reducer>;\r\n\r\nexport default () => {\r\n    const composeEnhancers = composeWithDevTools({});\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = applyMiddleware(sagaMiddleware);\r\n    const store = createStore(reducer, composeEnhancers(middlewares));\r\n    sagaMiddleware.run(sagas);\r\n    return store;\r\n};\r\n","/* eslint-disable jsx-quotes */\n/* eslint-disable quotes */\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    grow: {\n        flexGrow: 1,\n    },\n});\n\nexport default () => {\n    const classes = useStyles();\n    return (\n        <AppBar position=\"static\" style={{ background: '#48466D' }}>\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                    EOG React Visualization Assessment\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n};\n","/* eslint-disable quotes */\n/* eslint-disable react/prop-types */\nimport * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    wrapper: {\n        height: '110vh',\n        background: '#F5F5F5',\n    },\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n    const classes = useStyles();\n    return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","/* eslint-disable jsx-quotes */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable quotes */\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        backgroundColor: '#fff',\n        color: '#1f1f1f',\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nconst MetricCard = (props) => {\n    const classes = useStyles();\n    const [metric, setMetric] = useState({ metric: '', unit: '', value: '' });\n    const filterByMetric = [props.liveData].find((m) => m.metric === props.info.value);\n    const newValue = filterByMetric !== undefined ? filterByMetric : metric;\n\n    useEffect(() => {\n        if (newValue !== undefined) {\n            setMetric(newValue);\n        }\n    }, [newValue]);\n\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <Typography variant=\"h6\" component=\"h4\" align=\"center\">\n                    {props.info.label}\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\" align=\"center\" variant=\"h5\" component=\"h1\">\n                    {`${metric.value} - ${metric.unit}`}\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default MetricCard;\n","/* eslint-disable jsx-quotes */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable func-names */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable quotes */\nimport React, { Fragment, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Legend, ResponsiveContainer, Tooltip } from 'recharts';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst moment = require('moment');\n\ninterface Props {\n    data: any;\n    liveData: any;\n    selectedChartOptions: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        justifyContent: 'center',\n        marginLeft: '20px',\n        marginRight: '20px',\n    },\n    wrapper: {\n        width: '100%',\n        height: '70vh',\n        minHeight: '300px',\n    },\n});\n\nconst groupTimeObject: Array<any> = [];\nlet chartMetricData: Array<Object> = [];\nconst seen = {};\n\nfunction mergeObjectsInUnique<T>(array: T[]): T[] {\n    const newArray = new Map();\n    array.forEach((item: any) => {\n        const propertyValue = item.at;\n        newArray.has(propertyValue)\n            ? newArray.set(propertyValue, { ...item, ...newArray.get(propertyValue) })\n            : newArray.set(propertyValue, item);\n    });\n    return Array.from(newArray.values());\n}\n\nfunction groupByKey(array: any, key: string): void {\n    // For merging all values together\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array[i].measurements.length; j++) {\n            groupTimeObject.push({\n                at: moment(array[i].measurements[j].at).format('LTS'),\n                [array[i].measurements[j].metric]: array[i].measurements[j].value,\n            });\n        }\n    }\n    // For Grouping by time\n    groupTimeObject.filter(function (entry) {\n        let previous;\n        if (seen.hasOwnProperty(entry.at)) {\n            previous = seen[entry.at];\n            previous.data.push(entry);\n            return false;\n        }\n\n        if (!Array.isArray(entry)) {\n            entry.data = [entry.data];\n        }\n        seen[entry.at] = entry;\n        return true;\n    });\n\n    chartMetricData = mergeObjectsInUnique(groupTimeObject);\n}\n\nconst MetricChart: React.FC<Props> = (props) => {\n    const classes = useStyles();\n    const { data, liveData, selectedChartOptions } = props;\n    useEffect(() => {\n        groupByKey(data, 'at');\n    }, [data]);\n\n    useEffect(() => {\n        chartMetricData.push(liveData);\n        const insertLiveData = chartMetricData;\n        chartMetricData = mergeObjectsInUnique(insertLiveData);\n    }, [liveData]);\n    // Saample colors\n    const colors = ['#000000', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#654321', '#a65628', '#f781bf'];\n    if (selectedChartOptions.length === 0) {\n        return <p style={{ textAlign: 'center' }}>Please select atleast one metric from the dropdown</p>;\n    }\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <div className={classes.wrapper}>\n                    <ResponsiveContainer>\n                        <LineChart data={chartMetricData} margin={{ top: 10, right: 50, left: 10, bottom: 0 }}>\n                            <YAxis\n                                type=\"number\"\n                                domain={['auto', 'auto']}\n                                tickCount={30}\n                                scale=\"linear\"\n                                padding={{ top: 10, bottom: 10 }}\n                            />\n                            <XAxis dataKey=\"at\" tickCount={30} />\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <Legend />\n                            <Tooltip />\n\n                            {selectedChartOptions?.map((c: { value: string }, i: number) => {\n                                return (\n                                    <Line\n                                        type=\"monotone\"\n                                        key={c.value}\n                                        dataKey={c.value}\n                                        stroke={colors[i]}\n                                        dot={false}\n                                        isAnimationActive={false}\n                                    />\n                                );\n                            })}\n                        </LineChart>\n                    </ResponsiveContainer>\n                </div>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default MetricChart;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-quotes */\n/* eslint-disable quotes */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinearProgress, Grid } from '@material-ui/core/';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Select from 'react-select';\nimport { useQuery, useSubscription } from 'urql';\nimport CardCharts from '../components/MetricCard';\nimport MetricChart from '../components/MetricChart';\nimport { IState } from '../Redux/Store';\nimport { actions } from '../Redux/Reducers/Reducer';\n\nconst currentTime = new Date().valueOf();\nconst passTime = 1800000;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        select: {\n            padding: theme.spacing(2),\n        },\n    }),\n);\n\n// Graphql Querries\nconst query = `{\n  getMetrics\n  }\n`;\n\nconst queryMultipleMeasurements = `\nquery($input: [MeasurementQuery]){\n  getMultipleMeasurements(input: $input) {\n    metric\n    measurements {\n     at\n     value\n     metric\n     unit\n    }\n  }\n}`;\n\nconst queryMetricSubscription = `\n  subscription {\n    newMeasurement{\n      metric\n      at\n      value\n      unit\n    }\n  }\n`;\n\nexport interface MultipleMeasurements {\n    measurements: Object;\n}\n\nconst getMetrics = (state: IState) => {\n    const { allMetrics, multipleMeasurements, liveData } = state.MetricsData;\n    return {\n        allMetrics,\n        multipleMeasurements,\n        liveData,\n    };\n};\n\nconst EOGMetrics = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const isMultiSelect = true;\n    const [selectedChartOptions, setSelectedChartsOptions] = useState([]);\n    const [dropDownOptions, setDropDownOptions] = useState([]);\n    const { allMetrics, multipleMeasurements, liveData } = useSelector(getMetrics);\n\n    const [resultgetMetrics] = useQuery({\n        query,\n    });\n    const [resultMultipleMeasurements] = useQuery({\n        query: queryMultipleMeasurements,\n        variables: {\n            // We could also just fetch the metrics the user needs combining the selectedChartOptions hooks\n            input: allMetrics.map((metricName) => ({\n                metricName,\n                after: currentTime - passTime,\n                before: currentTime,\n            })),\n        },\n    });\n    const [resultsLiveMetrics] = useSubscription({\n        query: queryMetricSubscription,\n    });\n\n    const selectedOptions = (options) => {\n        if (options === null) {\n            setSelectedChartsOptions([]);\n        } else {\n            setSelectedChartsOptions(options);\n        }\n    };\n\n    useEffect(() => {\n        const tempOptions: any = [];\n        allMetrics.forEach((m: any) => {\n            tempOptions.push({ value: m, label: m.replace(/([A-Z])/g, ' $1').toUpperCase() });\n        });\n        setDropDownOptions(tempOptions);\n    }, [allMetrics]);\n\n    // Get All Avaliable Metrics\n    useEffect(() => {\n        const { data, error } = resultgetMetrics;\n        if (error) {\n            dispatch(actions.metricsApiErrorReceived({ error: error?.message }));\n            return;\n        }\n        if (!data) return;\n\n        dispatch(actions.allMetricsDataRecevied(data));\n    }, [dispatch, resultgetMetrics]);\n\n    // Effect for Multiple and Pass Metrics\n    useEffect(() => {\n        const { data, error } = resultMultipleMeasurements;\n        if (error) {\n            dispatch(actions.metricsApiErrorReceived({ error: error?.message }));\n            return;\n        }\n        if (!data) return;\n        dispatch(actions.multipleMeasurementsDataRecevied(data?.getMultipleMeasurements));\n    }, [dispatch, resultMultipleMeasurements]);\n\n    // Effect for Live Data\n    useEffect(() => {\n        const { data, error } = resultsLiveMetrics;\n        if (error) {\n            dispatch(actions.metricsApiErrorReceived({ error: error?.message }));\n            return;\n        }\n        if (!data) return;\n        dispatch(actions.metricLiveDataRecevied(data?.newMeasurement));\n    }, [dispatch, resultsLiveMetrics]);\n\n    if (resultMultipleMeasurements?.fetching) {\n        return <LinearProgress />;\n    }\n    return (\n        <>\n            <Grid container spacing={3}>\n                <Grid item xs={3} />\n                <Grid item xs={6}>\n                    <div style={{ marginTop: '30px' }}>\n                        <Select\n                            onChange={selectedOptions}\n                            isMulti={isMultiSelect}\n                            closeMenuOnSelect\n                            options={dropDownOptions}\n                        />\n                    </div>\n                </Grid>\n            </Grid>\n            <Grid container spacing={1} className={classes.select}>\n                {selectedChartOptions?.map((c, i) => {\n                    return (\n                        <Grid key={i} item xs={2}>\n                            <CardCharts info={c} liveData={resultsLiveMetrics.data.newMeasurement} />\n                        </Grid>\n                    );\n                })}\n            </Grid>\n            <Grid container spacing={1} className={classes.select} />\n            <MetricChart data={multipleMeasurements} liveData={liveData} selectedChartOptions={selectedChartOptions} />\n        </>\n    );\n};\n\nexport default EOGMetrics;\n","/* eslint-disable quotes */\nimport React from 'react';\nimport { Provider } from 'react-redux';\n\nimport { ToastContainer } from 'react-toastify';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport createStore from './Redux/Store';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\nimport EOGMetrics from './Dashboard/EOGMetrics';\n\nconst store = createStore();\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: 'rgb(39,49,66)',\n        },\n        secondary: {\n            main: 'rgb(197,208,222)',\n        },\n        background: {\n            default: 'rgb(226,231,238)',\n        },\n    },\n});\n\nconst App = () => {\n    return (\n        <MuiThemeProvider theme={theme}>\n            <CssBaseline />\n            <Provider store={store}>\n                <Wrapper>\n                    <Header />\n                    <EOGMetrics />\n                    <ToastContainer />\n                </Wrapper>\n            </Provider>\n        </MuiThemeProvider>\n    );\n};\n\nexport default App;\n","/* eslint-disable quotes */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable quotes */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { Provider, createClient, defaultExchanges, subscriptionExchange } from 'urql';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst subscriptionClient = new SubscriptionClient('wss://react.eogresources.com/graphql', {\n    reconnect: true,\n});\n\n// For processing the operations & their results\nconst client = createClient({\n    url: 'https://react.eogresources.com/graphql',\n    exchanges: [\n        ...defaultExchanges,\n        subscriptionExchange({\n            forwardSubscription: (operation) => subscriptionClient.request(operation),\n        }),\n    ],\n});\n// Provider:To allow our React-tree to access the client.\nReactDOM.render(\n    <Provider value={client}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}